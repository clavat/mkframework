<variables>
	
<select><![CDATA[		$oView->tJoinexamplemodel=examplemodel::getInstance()->getSelect();]]></select>

<uploadsave><![CDATA[
		$tColumnUpload=//tColumnUpload
		if($tColumnUpload){
			foreach($tColumnUpload as $sColumnUpload){
				$oPluginUpload=new plugin_upload($sColumnUpload);
				if($oPluginUpload->isValid()){
					$sNewFileName=_root::getConfigVar('path.upload').$sColumnUpload.'_'.date('Ymdhis');

					$oPluginUpload->saveAs($sNewFileName);
					$oExamplemodel->$sColumnUpload=$oPluginUpload->getPath();
				}
			}
		}
]]></uploadsave>

<methodList><![CDATA[
	public function _list(){
	
		//instancier le module
		$oTable=new module_guriddo;
		//on indique le nombre de lignes par page
		$oTable->setPaginationLimit(//icitablelimit);
	
		//crudEnable

		//l'id de la div html
		$oTable->setId('//iciDefaultSortField');

		//on definit la hauteur du tableau (en pixels)
		$oTable->setHeight(//icitableHeight);
		$oTable->setWidth(//icitableWidth);

		//la page permettant de retourner le contenu au format json
		$oTable->setJsonLink('examplemodule::listJson');

		//on defini (si besoin) un menu deroulant permettant de modifier la pagination
		$oTable->setListLimit(array(10,20));

		//activer l'alternance des lignes
		$oTable->enableAltRows();

		//activer la reorganisation des colonnes
		$oTable->enableSortable();

		//definir le sens par defaut de tri (asc/desc)
		$oTable->setDefaultSort('desc');

		//defintion du tri par defaut
		$oTable->setDefaultSortField('//iciDefaultSortField');

		//pour ajouter un group de colonne
		//$oTable->addGroupColumn('Mon groupe',2,'champDeDepart');

		//icijoins
	
		//icicolumns

		$oView= $oTable->build();

		//assigner la vue retournee a votre layout
		$this->oLayout->add('main',$oView);
			
		 
	}
]]></methodList>

<methodListColumn><![CDATA[ $oTable->addColumn('examplecolumnLabel','examplecolumn',exampleOption); ]]></methodListColumn>

<methodListJsonColumn><![CDATA[ $oJson->addColumn('examplecolumn'); ]]></methodListJsonColumn>


<methodListJson><![CDATA[ 
	public function _listJson(){

		$oJson=module_guriddo::getJson();
		//on precise la liste des champs autorise a etre trie
		$oJson->setSortFieldAllowed(array(//icisortfieldallowed));

		if($oJson->hasFilter()){

			$count = model_examplemodel::getInstance()->findTotalFiltered($oJson->getListFilter());
			$oJson->setTotal($count);
			$tData=model_examplemodel::getInstance()->findListFilteredAndLimitOrderBy($oJson->getListFilter(),$oJson->getStart(),$oJson->getLimit(),$oJson->getSortField(),$oJson->getSortSide());

		}else{
			$count = model_examplemodel::getInstance()->findTotal();
			$oJson->setTotal($count);
			$tData=model_examplemodel::getInstance()->findListLimitOrderBy($oJson->getStart(),$oJson->getLimit(),$oJson->getSortField(),$oJson->getSortSide());
		}
		
		//icijsonjointures

		$oJson->setData($tData);

		$oJson->setId('//iciDefaultSortField');
		$oJson->addColumn('//iciDefaultSortField');
		//icijsoncolumns

		$oJson->show();
	}
 ]]></methodListJson>

<methodPaginationList><![CDATA[
	 
]]></methodPaginationList>
			
<methodNew><![CDATA[
	 
]]></methodNew>
	
<methodEdit><![CDATA[
	 
	 
]]></methodEdit>

<methodShow><![CDATA[
	 
]]></methodShow>
	
<methodDelete><![CDATA[
	
]]></methodDelete>	

<methodProcessDelete><![CDATA[
	public function processDelete(){
		if(!_root::getRequest()->isPost() ){ //si ce n'est pas une requete POST on ne soumet pas
			return null;
		}
		
		 
	
		$oExamplemodel=model_examplemodel::getInstance()->findById( _root::getParam('id',null) );
				
		$oExamplemodel->delete();
		//une fois enregistre on redirige (vers la page liste)
		_root::redirect('examplemodule::list');
		
	}
]]></methodProcessDelete>	
</variables>
